import java.util.Set;
import java.util.TreeSet;

aspect Errors {
	public class ErrorMessage implements Comparable<ErrorMessage> {
		protected final String message;
		protected final int lineNumber;
		public ErrorMessage(String message, int lineNumber) {
			this.message = message;
			this.lineNumber = lineNumber;
		}
		public int compareTo(ErrorMessage other) {
			if (lineNumber == other.lineNumber) {
				return message.compareTo(other.message);
			}
			return Integer.compare(lineNumber, other.lineNumber); 
		}
		public String toString() {
			return "Error at line " + lineNumber + ": " + message;
		}
	} 
	protected ErrorMessage ASTNode.error(String message) {
		return new ErrorMessage(message, getLine(getStart()));
	}

	coll Set<ErrorMessage> Program.errors() [new TreeSet<ErrorMessage>()] with add root Program;

	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
}


aspect ErrorContributions {
	IdUse contributes error("symbol '" + getID() + "' is not declared")
		when decl().isUnknown()
		to Program.errors() for program();

	IdDecl contributes error("symbol '" + getID() + "' is already declared!")
		when isMultiDeclared()
		to Program.errors() for program();

	IdUse contributes error("the definition of symbol '" + getID() + "' is circular")
		when isCircular()
		to Program.errors() for program();
/*
	
	

	
	FunctionCallStmt contributes error("Found type: " + getExpr().type().getID() + ", ExpectedType: " + getExpr().expectedType().getID())
		when !getExpr().type().compatibleType(getExpr().expectedType())
     	to Program.errors() for program();

	Expr contributes error("Found Type: " + type().getID() + ", ExpectedType: " + expectedType().getID())
		when !type().compatibleType(expectedType())
		to Program.errors() for program();
*/

	DeclAssignmentStmt contributes error("Found type: " + getExpr().type().getID() + ", ExpectedType: " + getExpr().expectedType().getID())
		when !getExpr().type().compatibleType(getExpr().expectedType())
		to Program.errors() for program();

	IfStmt contributes error("Found Type: " + getExpr().type().getID() + ", ExpectedType: " + getExpr().expectedType().getID())
		when !getExpr().type().compatibleType(getExpr().expectedType())
		to Program.errors() for program();

	WhileStmt contributes error("Found Type: " + getExpr().type().getID() + ", ExpectedType: " + getExpr().expectedType().getID())
		when !getExpr().type().compatibleType(getExpr().expectedType())
		to Program.errors() for program();

	ReturnStmt contributes error("Found Type: " + getExpr().type().getID() + ", ExpectedType: " + getExpr().expectedType().getID())
		when !getExpr().type().compatibleType(getExpr().expectedType())
		to Program.errors() for program();

    AssignmentStmt contributes error("Found type: " + getExpr().type().getID() + ", ExpectedType: " + getExpr().expectedType().getID())
		when !getExpr().type().compatibleType(getExpr().expectedType())
		to Program.errors() for program();

	// FunctionCall contributes error("Foundtype: " + type().getID() + ", ExpectedType: " + expectedType().getID())
	// when !type().compatibleType(expectedType())
	// to Program.errors() for program();
	
	FunctionCall contributes error("Function referencing variable")
		when funcRefVarError()
		to Program.errors() for program();

	DeclAssignmentStmt contributes error("Variable referencing function")
		when varRefFuncError()
		to Program.errors() for program();

	FunctionCall contributes error("Paramerror")
		when !correctNumArgs()
		to Program.errors() for program();


	}