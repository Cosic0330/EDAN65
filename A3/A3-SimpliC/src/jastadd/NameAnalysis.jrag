import java.util.Set;
import java.util.HashSet;

aspect NameAnalysis {
	public class SymbolTable {
		private static final SymbolTable BOTTOM = new SymbolTable() {
			@Override
			public boolean declare(String name) {
				throw new UnsupportedOperationException(
						"cannot add name to bottom of name stack");
			}
			@Override
			public boolean lookup(String name) {
				return false;
			}
		};

		private final SymbolTable tail;
		private final Set<String> names = new HashSet<String>();

		public SymbolTable() {
			tail = BOTTOM;
		}

		public SymbolTable(SymbolTable tail) {
			this.tail = tail;
		}

		/**
		 * Attempt to add a new name to the symbol table.
		 * @return true if name was not already declared
		 */
		public boolean declare(String name) {
			return names.add(name);
		}

		/**
		 * @return true if name has been declared
		 */
		public boolean lookup(String name) {
			return names.contains(name) || tail.lookup(name);
		}

		/**
		 * Push a new table on the stack.
		 * @return the new top of the stack
		 */
		public SymbolTable push() {
			return new SymbolTable(this);
		}
	}

	/**
	 * @param err where to write error messages
	 */
	public void Program.checkNames(PrintStream err) {
		SymbolTable symbols = new SymbolTable();
		checkNames(err, symbols);
	}

	/**
	 * @param err where to write error messages
	 * @param symbols symbol table
	 */
	public void ASTNode.checkNames(PrintStream err, SymbolTable symbols) {
    for (ASTNode child : astChildren()) {
		  child.checkNames(err, symbols);
		}
	}

	public void FunctionDecl.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.declare(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		} else {
			symbols = symbols.push();
			if (hasParam()) {
				for (Param p : getParams()) {
					p.checkNames(err, symbols);
				}
			}
			getBlock().checkNames(err, symbols);
		}
	}

	public void Param.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.declare(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		}
	}

	public void Block.checkNames(PrintStream err, SymbolTable symbols) {
		symbols = symbols.push();
		if (hasStmt()) {
			for (Stmt s : getStmts()) {
				s.checkNames(err, symbols);
			}
		}
	}

	public void VariableDecl.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.declare(getID())) {
			err.format("Error at line %d: symbol \'%s\' is already declared!", getLine(), getID());
			err.println();
		}
	}

	public void AssignmentStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getVariableUse().checkNames(err, symbols);
		getExpr().checkNames(err, symbols);
	}

	public void DeclAssignmentStmt.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.declare(getID())) {
			err.format("Error at line %d: symbol \'%s\' is already declared!", getLine(), getID());
			err.println();
		}
		getExpr().checkNames(err, symbols);
	}

	public void FunctionCallStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getExpr().checkNames(err, symbols);
	}

	public void WhileStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getExpr().checkNames(err, symbols);
		getBlock().checkNames(err, symbols);
	}

	public void IfStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getExpr().checkNames(err, symbols);
		getBlock().checkNames(err, symbols);
		if (hasElse()) {
			getElse().checkNames(err, symbols);
		}
	}

	public void ReturnStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getExpr().checkNames(err, symbols);
	}

	public void VariableUse.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.lookup(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		}
	}

	public void FunctionCall.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.lookup(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		}
	}

	/**
	 * Helper method
	 * @return line number of this token
	 */
	public int ASTNode.getLine() {
		return getLine(getStart());
	}
}
